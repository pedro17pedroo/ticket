version: '3.8'

services:
  # PostgreSQL - Banco de dados principal
  postgres:
    image: postgres:15-alpine
    container_name: tatuticket-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: tatuticket
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Logs e auditoria
  mongodb:
    image: mongo:7
    container_name: tatuticket-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: tatuticket_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache e sessões
  redis:
    image: redis:7-alpine
    container_name: tatuticket-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tatuticket-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: tatuticket
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      MONGODB_URI: mongodb://mongodb:27017/tatuticket_logs
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs

  # Portal Organização
  portal-org:
    build:
      context: ./portalOrganizaçãoTenant
      dockerfile: Dockerfile
    container_name: tatuticket-portal-org
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:3000/api

  # Portal Cliente
  portal-client:
    build:
      context: ./portalClientEmpresa
      dockerfile: Dockerfile
    container_name: tatuticket-portal-client
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:3000/api

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  default:
    name: tatuticket-network
